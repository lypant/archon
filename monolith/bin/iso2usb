#!/bin/bash
#-------------------------------------------------------------------------------
# FILE:         iso2usb
#
# USAGE:        iso2usb -h
#
# DESCRIPTION:  Formats given USB device.
#               Copies given ISO image contents to specified USB device, so it
#               can be used as USB boot media.
#               Installs Syslinux and MBR on the USB device.
#
# TODO:         Add step to set partition as bootable
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Settings adjustable using command line options
#-------------------------------------------------------------------------------

ISO_IMG=                # To be provided by user
USB_DEVICE="/dev/sdd"
USB_NB="1"
PART_LABEL=             # To be provided by user

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

usage()
{
cat << EOF
Formats given USB device.
Copies given ISO image contents to specified USB device, so it \
can be used as USB boot media.
Installs Syslinux and MBR on the USB device.
Requires dosfstools package.

Note: USB device needs to be formatted and the partition has to be bootable.

Usage: ${0##*/} [-h] [-i ISO_IMG] [-d USB_DEVICE] [-p USB_NB USB] \
[-l PART_LABEL]
    -h display this help and exit
    -i ISO_IMG ISO file to be copied to USB partition (${ISO_IMG:-"unset"})
    -d USB_DEVICE USB device path, without partition number \
(${USB_DEVICE-"unset"})
    -p USB_NB USB partition number, where image will be copied, \
e.g. for /dev/sdd1 it should be 1 (${USB_NB-"unset"})
    -l PART_LABEL partition label, should match given Arch iso, \
e.g. for archlinux-20150-10.01.dual.iso it should be ARCH_201510 \
(${PART_LABEL:-"unset"})
EOF
}

checkOptions()
{
    if [[ -z "$ISO_IMG" ]]; then
        echo "Unset parameter ISO_IMG, use option -i"
        echo
        usage
        exit 1
    fi

    if [[ -z "$PART_LABEL" ]]; then
        echo "Unset parameter PART_LABEL, use option -l"
        echo
        usage
        exit 1
    fi
}

query()
{
    echo "ISO image:            $ISO_IMG"
    echo "USB device:           $USB_DEVICE"
    echo "USB partition number: $USB_NB"
    echo "Partition label:      $PART_LABEL"

    read -p "Proceed? [y/N]?" response
    case $response in
        [Yy]*)
            time { copyIso2Usb ; }
            ;;
        *)
            echo "Cancelled"
            exit 0
            ;;
    esac
}

copyIso2Usb()
{
    echo "Copy ISO to usb..."

    echo "Format partition..."
    eval "sudo mkfs.msdos -n $PART_LABEL $USB_PART"

    echo "Create common mount dir..."
    eval "sudo mkdir -p /mnt/iso2usb"

    echo "Create iso mount dir..."
    eval "sudo mkdir -p /mnt/iso2usb/iso"

    echo "Create usb mount dir..."
    eval "sudo mkdir -p /mnt/iso2usb/usb"

    echo "Mount iso..."
    eval "sudo mount -o loop $ISO_IMG /mnt/iso2usb/iso"

    echo "Mount usb..."
    eval "sudo mount $USB_PART /mnt/iso2usb/usb"

    echo "Copy files from ISO to usb..."
    eval "sudo cp -a /mnt/iso2usb/iso/* /mnt/iso2usb/usb"
    eval "sync"

    echo "Unmount iso..."
    eval "sudo umount /mnt/iso2usb/iso"

    echo "Remove iso mount dir..."
    eval "sudo rmdir /mnt/iso2usb/iso"

    echo "Install syslinux on usb..."
    eval "sudo extlinux --install /mnt/iso2usb/usb/arch/boot/syslinux"

    echo "Install MBR on usb..."
    eval "sudo dd bs=440 count=1 conv=notrunc"\
         "if=/usr/lib/syslinux/bios/mbr.bin"\
         "of=$USB_DEVICE"
    eval "sync"

    echo "Unmount usb..."
    eval "sudo umount /mnt/iso2usb/usb"

    echo "Remove usb mount dir..."
    eval "sudo rmdir /mnt/iso2usb/usb"

    echo "Remove common mount dir.."
    eval "sudo rmdir /mnt/iso2usb"

    echo "Copy ISO to usb...done"
}

#-------------------------------------------------------------------------------
# Execution
#-------------------------------------------------------------------------------

if [[ "$#" -eq "0" ]]; then
    usage
    exit 0
fi

while getopts ":hi:d:p:l:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        i)
            ISO_IMG="$OPTARG"
            ;;
        d)
            USB_DEVICE="$OPTARG"
            ;;
        p)
            USB_NB="$OPTARG"
            ;;
        l)
            PART_LABEL="$OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument"
            exit 1
            ;;
    esac
done

checkOptions

#----------------------------------------
# Dependent on command line options
#----------------------------------------

# Setup shell - detect unset variables
set -o nounset
# Setup shell - exit on error
set -o errexit

USB_PART="${USB_DEVICE}${USB_NB}"

query

