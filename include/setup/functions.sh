#!/bin/bash
#===============================================================================
# FILE:         functions.sh
#
# USAGE:        Include in other scripts, e.g. source functions.sh
#
# DESCRIPTION:  Functions used by setup scripts.
#               Contains only function definitions - they are not executed.
#
# CONVENTIONS:  Function should either return error code or abort the script
#               on failure.
#               Names of functions returning value start with an underscode.
#===============================================================================

#===============================================================================
# Generic functions
#===============================================================================

# Requires:
#   LOG_DIR
createLogDir()
{
    # Check if log dir variable is set.
    # Since there is no standard logging mechanism available at that stage,
    # just check the variable and echo on screen instead of using
    # TODO: <reqVar function name> function.
    if [[ -z "$LOG_DIR" ]]; then
        echo "$FUNCNAME: variable LOG_DIR not set"
        echo "Aborting script!"
        exit 1
    fi

    # Create log directory
    mkdir -p $LOG_DIR

    # Check result
    if [[ "$?" -ne 0 ]]; then
        echo "Failed to create log dir $LOG_DIR"
        echo "Aborting script!"
        exit 2
    fi
}

# Requires:
#   LOG_FILE
#   LOG_PREFIX
_log()
{
    # Check if all required variables are set
    if [[ -z "$LOG_FILE" ]]; then
        echo "$FUNCNAME: variable LOG_FILE not set"
        return 1
    fi

    if [[ -z "$LOG_PREFIX" ]]; then
        echo "$FUNCNAME: variable LOG_PREFIX not set"
        return 2
    fi

    # Use msg with prefix to distinguish logs generated by setup scripts
    local msg="$PROJECT_LOG_PREFIX$@"

    # Write message to screen and log file
    (echo "$msg" 2>&1) | tee -a $LOG_FILE
    return ${PIPESTATUS[0]}
}

# Requires:
#   LOG_FILE
#   CMD_PREFIX
_cmd()
{
    # Check if all required variables are set
    if [[ -z "$LOG_FILE" ]]; then
        echo "$FUNCNAME: variable LOG_FILE not set"
        return 1
    fi

    if [[ -z "$CMD_PREFIX" ]]; then
        echo "$FUNCNAME: variable CMD_PREFIX not set"
        return 2
    fi

    # Record command to be executed to the log file
    echo "$CMD_PREFIX$@" >> $LOG_FILE

    # Execute command
    # Redirect stdout and stderr to screen and log file
    (eval "$@" 2>&1) | tee -a $LOG_FILE
    return ${PIPESTATUS[0]}
}

# Checks whether required variable is set
# Usage: req MY_VAR $FUNCNAME
req()
{
    local var="$1"
    local function="$2"

    if [[ -z "${!var}" ]]; then
        _log "$function: variable $var not defined"
        _log "Aborting script!"
        exit 1
    fi
}

# Checks provided error code. Terminates script when it is nonzero.
# Usage: err $? $FUNCNAME "message to be shown and logged"
err()
{
    # Check number of required params
    if [[ $# -lt 3 ]]; then
        _log "$FUNCNAME: not enough parameters \($#\): $@"
        _log "Aborting script!"
        exit 1
    fi

    local error="$1"
    local funcname="$2"
    local msg="$3"

    if [[ "$error" -ne 0 ]]; then
        _log "$funcname: $msg: $error"
        _log "Aborting script!"
        exit 2
    fi
}

#===============================================================================
# Helper functions
#===============================================================================

updatePackageList()
{
    _log "Update package list..."

    _cmd "pacman -Syy"
    err "$?" "$FUNCNAME" "failed to update package list"

    _log "Update package list...done"
}

installPackage()
{
    _log "Installing package $@..."

    _cmd "pacman -S $@ --noconfirm"
    err "$?" "$FUNCNAME" "failed to install package $@"

    _log "Installing package $@...done"
}

#===============================================================================
# Setup functions
#===============================================================================

#=======================================
# LiveCD preparation
#=======================================

setConsoleFontTemporarily()
{
    req CONSOLE_FONT $FUNCNAME

    # Font setting is not crucial, so don't abort the script when it fails
    setfont $CONSOLE_FONT
}


installArchlinuxKeyring()
{
    req ARCHLINUX_KEYRING_PACKAGES $FUNCNAME

    _log "Install archlinux keyring..."

    installPackage $ARCHLINUX_KEYRING_PACKAGES

    _log "Install archlinux keyring...done"
}

installLivecdVim()
{
    req VIM_PACKAGES $FUNCNAME

    _log "Install livecd vim..."

    installPackage $VIM_PACKAGES

    _log "Install livecd vim...done"
}

