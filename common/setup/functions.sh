#!/bin/bash
#===============================================================================
# FILE:         functions.sh
#
# USAGE:        Include in ohter scripts, e.g. source functions.sh
#
# DESCRIPTION:  Basic functions used by other scripts.
#               Contains only function definitions - they are not executed.
#
# CONVENTIONS:  A function should either return an error code or abort a script
#               on failure.
#               Names of functions returning value start with an underscore.
#               Exception:  log function - returns result but always neglected,
#                           so without an underscore - for convenience
#===============================================================================

set -o nounset errexit

#===============================================================================
# Basic functions
#===============================================================================

# Requires:
#   LOG_FILE
#   LOG_PREFIX
log()
{
    # Use msg with prefix to distinguish logs generated by setup scripts
    local msg="$LOG_PREFIX$@"

    # Write message to screen and log file
    (echo "$msg" 2>&1) | tee -a $LOG_FILE
    return ${PIPESTATUS[0]}
}

# Requires:
#   LOG_FILE
#   CMD_PREFIX
_cmd()
{
    # Record command to be executed to the log file
    echo "$CMD_PREFIX$@" >> $LOG_FILE

    # Execute command
    # Redirect stdout and stderr to screen and log file
    (eval "$@" 2>&1) | tee -a $LOG_FILE
    return ${PIPESTATUS[0]}
}

_uncommentVar()
{
    if [[ $# -lt 2 ]]; then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

	local var="$1"
	local file="$2"

    _cmd "sed -i \"s|^#\(${var}.*\)$|\1|\" ${file}"
    return $?
}

_commentVar()
{
    if [[ $# -lt 2 ]]; then
        log "$FUNCNAME: not enough parameters \($#\): $@"
        return 1
    fi

	local var="$1"
	local file="$2"

    _cmd "sed -i \"s|^\(${var}.*\)$|#\1|\" ${file}"
    return $?
}

